/**************************************************
start for service frontend

const express = require("express");
const compression = require('compression');
const fs = require('fs');
const cors = require('cors');
const path = require('path');
const app = express();
const port = process.env.PORT || 443;
////////////////////////////////////////////////////////////////////////
const https = require("https");
const options = {
  key: fs.readFileSync('/home/ubuntu/application-linsoft-micro-services/ssl-certs/privkey.pem'),
  cert: fs.readFileSync('/home/ubuntu/application-linsoft-micro-services/ssl-certs/fullchain.pem')
};



////////////////////////////////////////////////////////////////////////
app.use(compression());
app.use(cors());
////////////////////////////////////////////////////////////////////////
app.use (function (req, res, next) {
  if (req.secure) {
          // request was via https, so do no special handling
          next();
  } else {
          // request was via http, so redirect to https
          res.redirect('https://' + req.headers.host + req.url);
  }
});


////////////////////////////////////////////////////////////////////////
app.use(express.static(path.join(__dirname, "public")));

////////////////////////////////////////////////////////////////////////
app.listen(80);

https.createServer(options,app).listen(port)

////////////////////////////////////////////////////////////////////////


***************************************************/
///////////////////////////////////////////////////////////////////






/**************************************************
start for service Backend


const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");

const passport = require("passport");
const routerCategories = require("./routes/categories");
const app = express();
const port = process.env.PORT || 8083;

////////////////////////////////////////////////////////////////////////
const fs = require('fs');
const https = require("https");
const options = {
  key: fs.readFileSync('/home/ubuntu/application-linsoft-micro-services/ssl-certs/privkey.pem'),
  cert: fs.readFileSync('/home/ubuntu/application-linsoft-micro-services/ssl-certs/fullchain.pem')
};



////////////////////////////////////////////////////////////////////////
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(cors());
// passpowt config
app.use(passport.initialize());
app.use(passport.session());
const passport_admin = require("./config/passport")(passport);
const  config_passport_admin = passport.authenticate("admin-rule", { session: false });
// end passport config
app.use("/api/categories", config_passport_admin, routerCategories);
app.use((req, res, next) => {
    res.status(404).send({
      status: 404,
      error: "Not found",
    });
  });
  ///
  https.createServer(options,app).listen(port);




***************************************************/